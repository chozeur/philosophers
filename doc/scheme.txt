[RESUME]
.
un philosophe [mange] OU [dors] OU [pense] (dans cet ordre)
.
si un philosophe ne [mange] pas pdt [time_to_die] il meurt
.
les philosophes ne peuvent pas communiquer entre eux -> ils ne peuvent pas savoir qd l un d eux va mourir
.
les philosophes ne doivent pas mourir
.
[REGLES]
.
variables globales interdites
.
Libft interdite
.
rendre le projet dans un dossier /philo/
-*- arguments du main
[number_of_philosophers] = nombre de philosophes <=> nombre de fourchettes
[time_to_die] (ms) = temps imparti avant la mort d un philosophe depuis le DEBUT de son dernier repas
[time_to_eat] (ms) = temps que met un philosophe pour manger <=> temps qu il garde ses fourchettes
[time_to_sleep] (ms) = temps qu un philosophe passe a dormir
[number_of_times_each_philosopher_must_eat] = si TOUS les philosophes ont mange tant de fois, la simulation s arrete (si pas specifiee -> simulation s arrete a la mort d un philosophe)
-*- positionnement
chaque philosophe a un numero [n] avec 1 < [n] > [number_of_philosophers]
.
{philo_1} est assis a cote de {philo_2} et {philo_n} assis entre {philo_n-1} et {philo_n+1}
-*- logs
chaque changement d etat d un philosophe doit etre formate comme : [timestamp_in_ms] [n] {[has taken a fork] / [is eating] / [is sleeping] / [is thinking] /[died]}
.
les logs ne doivent pas se melanger
.
max 10 ms entre la mort d un philosophe et le log de sa mort
.
-*- spec
chaque philosophe doit etre represente par un thread
.
si il n y a qu un philosophe -> il n y a qu une seule fourchette sur la table
.
proteger les fourchettes avec un mutex pour eviter que les philosophes les dupliquent philosophe
.
[FONCTIONS AUTORISEES]
.
-*- memset
fill memory with a constant byte
.
<string.h>
.
void *memset(void *s, int c, size_t n);
-*- printf
-*- malloc
-*- free
-*- write
-*- usleep
suspend execution for microsecond intervals (1 µs = 0.001 ms)
.
<unistd.h>
.
int usleep(useconds_t usec);
-*- gettimeofday
get timestamp
.
include <sys/time.h>
.
int gettimeofday(struct timeval *tv, struct timezone *tz);
-*- pthread_create
create a new thread
.
include <pthread.h>
.
int pthread_create(pthread_t *restrict thread, const pthread_attr_t *restrict attr, void *(*start_routine)(void *), void *restrict arg)
.
{pthread_t *restrict thread}		: pointeur sur identifiant du thread cree (= [EGAIN] si pas assez de ressources ou si [PTHREAD_THREADS_MAX] est atteint (1024 sous unix))
{pthread_t *restrict thread}		: pointeur permettant de definir des attributs au thread cree (= NULL pour une creation par defaut)
{void *(*start_routine)(void *)}	: pointeur sur la foncton a executer par le thread cree
{void *restrict arg}				: pointeur sur un argument a passer a la routine
.
renvoie 0 si la creation a reussi
-*- pthread_detach
detach a thread
.
include <pthread.h>
.
int pthread_detach(pthread_t thread)
-*- pthread_join
met en pause l exécution du thread appelant jusqu au retour de la fonction
.
include <pthread.h>
.
int pthread_join(pthread_t thread, void **retval)
.
retourne :	0 si tt s est bien passe
			[ESRCH] si aucun thread ne correspond a celui passe en argument
			[EINVAL] si le thread a ete detach ou si un autre thread attend deja la fin du meme thread
			[EDEADLK] si le thread passe en argument correspond au thread appelant
-*- pthread_mutex_init
initialize a mutex
.
include <pthread.h>
.
int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);
-*- pthread_mutex_destroy
destroy a mutex
.
include <pthread.h>
.
int pthread_mutex_destroy(pthread_mutex_t *mutex);
-*- pthread_mutex_lock
lock a mutex <=> determine le debut d une zone critique
.
include <pthread.h>
.
int pthread_mutex_lock(pthread_mutex_t *mutex);
.
{pthread_mutex_t *mutex} : adresse du mutex a verrouiller
.
retourne :	0 si tt s est bien passe
			[EINVAL] si mutex non initialise
			[EDEADLK] si mutex deja verrouille par un thread different
-*- pthread_mutex_unlock
unlock a mutex
.
include <pthread.h>
.
int pthread_mutex_unlock(pthread_mutex_t *mutex);
.
{pthread_mutex_t *mutex} : adresse du mutex a deverrouiller
.
retourne :	0 si tt s est bien passe
			[EINVAL] si mutex non initialise
			[EPERM] si le thread n a pas la main sur le mutex
[THREADS]
.
lorsqu un thread est cree (pthread_create) il est lance immediatement et execute sa routine
.
l execution d un thread se fait soit jusqu a la fin de sa routine soit jusqu a son annulation
.
une meme routine peut etre donnee a plusieurs threads
.
un thread terminé ne peut être relancé, il faut en créer un nouveau, car un thread qui touche à sa fin est implicitement détruit
[MUTEX]
.
mutex = mutual exclusion = zone d exclusion mutuelle
.
creation d un mutex : déclarer une variable du type pthread_mutex_t et l initialiser avec la constante PTHREAD_MUTEX_INITIALIZER
-> {static pthread_mutex_t mutex_stock = PTHREAD_MUTEX_INITIALIZER;}
.
un mutex n a que deux etats possibles : verrouille /  deverouille
.
toujours deverouiller les mutex avant la fin d un thread => RISQUE DE "DEAD LOCK" faisant que tous les threads voulant l utiliser plus tard viendront a s arreter
.
[PLAN]
.
mettre chaque philosophe dans un thread
.
{philo_1} commence par manger, puis {philo_n+2} . . .
.

